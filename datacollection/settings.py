"""
Django settings for datacollection project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv

# import sys
import os
import logging

# from django.templatetags.static import static


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()

logger = logging.getLogger(__name__)


def as_bool(value: str):
    return value.lower() in ["true", "yes"]


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-*_^$!#mp28jhe25iq6dok5suz(_!529k-c2hj#wnd!7@6@p%ri"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = [
    "localhost",
    "206.189.238.225",
    "127.0.0.1",
    "www.ihearandsee-at-rail.com",
    "ihearandsee-at-rail.com",
]


# Application definition

INSTALLED_APPS = [
    # optional, if special form elements are needed
    "storages",
    "unfold",  # before django.contrib.admin
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.inlines",  # optional, if special inlines are needed
    "unfold.contrib.import_export",  # optional, if django-import-export package is used
    "unfold.contrib.guardian",  # optional, if django-guardian package is used
    "unfold.contrib.simple_history",  # optional, if django-simple-history package is used
    "django.contrib.admin",
    "tailwind",
    "theme",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "data",
    "core",
    "authentication",
    "datacollection",
]
TAILWIND_APP_NAME = "theme"


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


ROOT_URLCONF = "datacollection.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "datacollection.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# settings.py
USE_SQLITE = as_bool(os.getenv("USE_SQLITE", "False"))

if USE_SQLITE:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("POSTGRES_DB", "iheardatadb"),
            "USER": os.getenv("POSTGRES_USER", "postgres"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD", "localhost"),
            "HOST": os.getenv("POSTGRES_HOST", "db"),
            "PORT": int(os.getenv("POSTGRES_PORT", 5432)),
            "OPTIONS": {"sslmode": os.getenv("PGSSLMODE", "prefer")},
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "authentication.CustomUser"


# Email Configuration
if bool(os.getenv("USE_SMTP_EMAIL", True)):
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
else:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
EMAIL_USE_TLS = True
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = 587
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")

# Temporarily add this before your email settings to debug

# Authentication settings
LOGIN_URL = "/auth/login/"  # URL to redirect to for login
LOGIN_REDIRECT_URL = "/"  # Where to redirect after login
LOGOUT_REDIRECT_URL = "/auth/login/"


# At the top of your settings.py file, add this import


# Alternative approach without lambda (simpler):
UNFOLD = {
    "SITE_TITLE": "I hear Dataset Admin Portal",
    "SITE_HEADER": "I hear Dataset",
    "DARK_MODE": True,
    "LOGIN": {
        "image": "/static/assets/img/image.png",
        "title": "Welcome to I hear Dataset Admin Portal",
        "description": "Please enter your credentials",
    },
    "SIDEBAR": {
        "show_search": True,
        "show_all_applications": False,
    },
}

CORS_ALLOWED_ORIGINS = [
    "http://localhost",  # Your frontend URL
    "http://127.0.0.10",
    "http://0.0.0.0",
    "http://206.189.238.225",
    "www.ihearandsee-at-rail.com",
    "ihearandsee-at-rail.com",
    "http://ihearandsee-at-rail.com",
    "https://www.ihearandsee-at-rail.com",
]


CORS_ALLOW_CREDENTIALS = True  # To allow cookies


CSRF_TRUSTED_ORIGINS = [
    "http://127.0.0.1",
    "http://127.0.0.1:8000",
    "http://localhost",
    "http://0.0.0.0",
    "http://206.189.238.225",
    "http://ihearandsee-at-rail.com",
    "https://www.ihearandsee-at-rail.com",
]


USE_S3 = os.getenv("USE_S3", "False").lower() == "true"

if USE_S3:
    # DigitalOcean Spaces Settings
    AWS_ACCESS_KEY_ID = os.getenv("DO_SPACES_KEY")
    AWS_SECRET_ACCESS_KEY = os.getenv("DO_SPACES_SECRET")
    AWS_STORAGE_BUCKET_NAME = os.getenv("DO_SPACES_BUCKET")
    AWS_S3_ENDPOINT_URL = os.getenv(
        "DO_SPACES_ENDPOINT", "https://lon1.digitaloceanspaces.com"
    )

    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "OPTIONS": {
                "access_key": AWS_ACCESS_KEY_ID,
                "secret_key": AWS_SECRET_ACCESS_KEY,
                "bucket_name": AWS_STORAGE_BUCKET_NAME,
                "endpoint_url": AWS_S3_ENDPOINT_URL,
                "location": "media",
                "default_acl": "public-read",
                "object_parameters": {"CacheControl": "max-age=86400"},
            },
        },
        "staticfiles": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "OPTIONS": {
                "access_key": AWS_ACCESS_KEY_ID,
                "secret_key": AWS_SECRET_ACCESS_KEY,
                "bucket_name": AWS_STORAGE_BUCKET_NAME,
                "endpoint_url": AWS_S3_ENDPOINT_URL,
                "location": "static",
                "default_acl": "public-read",
                "object_parameters": {"CacheControl": "max-age=86400"},
            },
        },
    }

    STATIC_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/static/"
    MEDIA_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/media/"
else:
    # Local file storage
    STATIC_URL = "/static/"
    MEDIA_URL = "/media/"
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")

    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]


# READ HTTPS CONFIG FROM PROXY
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True
REDIS_USERNAME = os.getenv("REDIS_USERNAME", default="default")
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD", default="default")
REDIS_USE_TLS = as_bool(os.getenv("REDIS_USE_TLS", default="False"))
REDIS_HOST = os.getenv("REDIS_HOST", default="localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", default="6379"))
if REDIS_USE_TLS:
    REDIS_URL = f"rediss://{REDIS_USERNAME}:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}"
else:
    REDIS_URL = f"redis://{REDIS_USERNAME}:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}"
CACHE_TIMEOUT = int(os.getenv("CACHE_TIMEOUT", default=3600))
# DJANGO CACHE
CACHE_DB_ID = int(os.getenv("CACHE_DB_ID", default="1"))
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": f"{REDIS_URL}/{CACHE_DB_ID}",
        # "OPTIONS": {"CACHE_TIMEOUT": CACHE_TIMEOUT},
    }
}
# CHANNELS FOR WEBSOCKET
CHANNEL_LAYER_DB_ID = int(os.getenv("CHANNEL_LAYER_DB_ID", default="0"))
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [f"{REDIS_URL}/{CHANNEL_LAYER_DB_ID}"],
        },
    },
}
THROTTLE_RATE = os.getenv("THROTTLE_RATE", "100/s")

# CELERY
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_ALWAYS_EAGER = False
CELERY_ENABLE_UTC = True
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_BROKER_DB_ID = int(os.getenv("CELERY_BROKER_DB_ID", default="2"))
CELERY_RESULT_BACKEND_DB_ID = int(os.getenv("CELERY_RESULT_BACKEND_DB_ID", default="3"))
CELERY_BROKER_URL = f"{REDIS_URL}/{CELERY_BROKER_DB_ID}"
CELERY_RESULT_BACKEND = f"{REDIS_URL}/3"
if REDIS_USE_TLS:
    CELERY_BROKER_URL += "?ssl_cert_reqs=required"
    CELERY_RESULT_BACKEND += "?ssl_cert_reqs=required"
CELERY_TASK_ALWAYS_EAGER = as_bool(
    os.getenv("CELERY_TASK_ALWAYS_EAGER", default="False")
)
