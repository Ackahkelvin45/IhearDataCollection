# Generated by Django 5.2.2 on 2025-06-23 08:44

import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0007_alter_category_name_alter_class_name_and_more'),
        ('data', '0006_alter_noisedataset_duration_alter_noisedataset_name_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='VisualizationPreset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('chart_type', models.CharField(choices=[('waveform', 'Waveform'), ('spectrogram', 'Spectrogram'), ('spectrum', 'Frequency Spectrum'), ('mfcc', 'MFCCs'), ('chroma', 'Chroma Features'), ('db_trend', 'Decibel Trend'), ('time_analysis', 'Time Analysis'), ('feature_heatmap', 'Feature Heatmap')], max_length=50)),
                ('config', models.JSONField(help_text='Chart configuration in JSON format')),
                ('high_contrast', models.BooleanField(default=False)),
                ('alt_text_template', models.TextField(help_text='Template for generating alt text')),
            ],
        ),
        migrations.CreateModel(
            name='AudioFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rms_energy', models.FloatField(help_text='Root Mean Square energy')),
                ('zero_crossing_rate', models.FloatField(help_text='Zero Crossing Rate')),
                ('spectral_centroid', models.FloatField(help_text='Spectral Centroid')),
                ('spectral_bandwidth', models.FloatField(help_text='Spectral Bandwidth')),
                ('spectral_rolloff', models.FloatField(help_text='Spectral Rolloff')),
                ('spectral_flatness', models.FloatField(help_text='Spectral Flatness')),
                ('mfccs', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Mel-Frequency Cepstral Coefficients', size=13)),
                ('chroma_stft', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Chroma features from Short-Time Fourier Transform', size=12)),
                ('mel_spectrogram', models.TextField(help_text='JSON-serialized mel spectrogram data')),
                ('waveform_data', models.TextField(help_text='JSON-serialized waveform data for visualization')),
                ('harmonic_ratio', models.FloatField(help_text='Harmonic Ratio')),
                ('percussive_ratio', models.FloatField(help_text='Percussive Ratio')),
                ('noise_dataset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='audio_features', to='data.noisedataset')),
            ],
        ),
        migrations.CreateModel(
            name='NoiseAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mean_db', models.FloatField(help_text='Mean decibel level')),
                ('max_db', models.FloatField(help_text='Maximum decibel level')),
                ('min_db', models.FloatField(help_text='Minimum decibel level')),
                ('std_db', models.FloatField(help_text='Standard deviation of decibel levels')),
                ('peak_count', models.IntegerField(help_text='Number of significant peaks')),
                ('peak_interval_mean', models.FloatField(help_text='Mean interval between peaks')),
                ('dominant_frequency', models.FloatField(help_text='Dominant frequency in Hz')),
                ('frequency_range', models.CharField(help_text='Frequency range (low-high)', max_length=100)),
                ('loudness', models.FloatField(help_text='Perceived loudness')),
                ('sharpness', models.FloatField(help_text='Perceived sharpness')),
                ('roughness', models.FloatField(help_text='Perceived roughness')),
                ('fluctuation_strength', models.FloatField(help_text='Fluctuation strength')),
                ('event_count', models.IntegerField(help_text='Number of distinct noise events')),
                ('event_durations', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Durations of detected events in seconds', size=None)),
                ('noise_dataset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='noise_analysis', to='data.noisedataset')),
            ],
        ),
        migrations.CreateModel(
            name='NoiseProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avg_db', models.FloatField(help_text='Average decibel level')),
                ('max_db', models.FloatField(help_text='Maximum decibel level')),
                ('min_db', models.FloatField(help_text='Minimum decibel level')),
                ('freq_profile', models.TextField(help_text='JSON-serialized frequency profile')),
                ('temporal_pattern', models.TextField(help_text='JSON-serialized temporal pattern')),
                ('common_features', models.TextField(help_text='JSON-serialized common audio features')),
                ('sample_count', models.IntegerField(help_text='Number of samples in this profile')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.category')),
                ('class_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.class')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='noise_profiles', to='core.community')),
                ('time_of_day', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.time_of_day')),
            ],
            options={
                'unique_together': {('location', 'category', 'class_name', 'time_of_day')},
            },
        ),
    ]
